Callbacks:
A function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.
They can lead to “callback hell,” where callbacks are nested within other callbacks, making the code harder to read and maintain.

Promises:
Promises represent a value that may be available now, or in the future, or never.
They provide a more readable, cleaner, and structured way to handle asynchronous operations, avoiding deeply nested callbacks (callback hell).
Promises have methods like then(), catch(), and finally() to handle success, error, and cleanup cases, respectively.

Why Promises are Preferred:
Avoiding Callback Hell: Promises chain operations in a more readable and maintainable way.
Error Handling: Promises have built-in error handling via catch().
Better Control Flow: Promises can easily manage multiple asynchronous operations using methods like Promise.all() and Promise.race().
